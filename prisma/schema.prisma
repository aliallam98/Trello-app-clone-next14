
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Board {
  id String @id @default(uuid())
  orgId String
  title String
  imageId String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists         List[]

createdAt DateTime @default(now())
updateAt  DateTime @updatedAt
}

model List {
  id String @id @default(uuid())
  title String
  order Int

  boardId String
  board Board @relation(fields: [boardId],references: [id],onDelete: Cascade)

  card Card[]

  createdAt DateTime @default(now())
  updateAt DateTime  @updatedAt

  @@index([boardId])
}

model Card {
  id String @id @default(uuid())
  title String
  order Int
  description String? @db.Text

  listId String
  list List @relation(fields: [listId],references: [id],onDelete: Cascade)


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([listId])
}



enum ACTIONS_TYPE {
  CREATE
  UPDATE
  DELETE
}
enum ENTITY_TYPE {
CARD
BOARD
LIST
}

model ActivityLogs {
  id            String @id @default(uuid())
  orgId         String
  entityType    ENTITY_TYPE
  entityTitle   String
  entityId      String
  actionType    ACTIONS_TYPE
  userId        String
  userImage     String @db.Text
  userName      String @db.Text


  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

}

model orgLimits {
  id        String @id @default(uuid())
  orgId     String @unique
  count     Int @default(0)

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model subscription {
  id String @id @default(uuid())
  orgId String @unique

  stripeCustomerId String? @unique  @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId String? @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd  DateTime? @map(name: "stripe_current_period_end")
}